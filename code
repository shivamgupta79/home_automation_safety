// Libraries
#include <LiquidCrystal_I2C.h>
#include <DHT.h>

// Pin Definitions
#define DHTPIN 3                 // DHT11 Data Pin
#define DHTTYPE DHT11            // DHT11 Sensor Type
#define VIBRATION_PIN 2          // Vibration Sensor Pin
#define RELAY_PIN 4              // Relay Pin
#define AIR_QUALITY_PIN A0       // Air Quality Sensor Pin
#define BUTTON_UP 5              // Button for Incrementing Set Temperature
#define BUTTON_DOWN 6            // Button for Decrementing Set Temperature

// Thresholds
int setTemp = 25;                
const int airQualityThreshold = 400; 
const int humidityThreshold = 60;  

// Objects
LiquidCrystal_I2C lcd(0x27, 16, 2); 
DHT dht(DHTPIN, DHTTYPE);         

// Setup Function
void setup() {
  pinMode(VIBRATION_PIN, INPUT);        // Vibration Sensor as Input
  pinMode(RELAY_PIN, OUTPUT);           // Relay as Output
  pinMode(BUTTON_UP, INPUT_PULLUP);     
  pinMode(BUTTON_DOWN, INPUT_PULLUP);  

  lcd.begin();                    
  lcd.backlight();                   
  dht.begin();                       
  Serial.begin(9600);                  
}

// Main Loop
void loop() {
  // Vibration Sensor Check
  if (digitalRead(VIBRATION_PIN) == HIGH) {
    digitalWrite(RELAY_PIN, LOW);      
    lcd.setCursor(0, 0);
    lcd.print("Earthquake! Cut");
    lcd.setCursor(0, 1);
    lcd.print("Power Supply!");
    delay(2000);
    return;                          
  }

  // Read Temperature and Humidity from DHT11 Sensor
  float temp = dht.readTemperature();  
  float humidity = dht.readHumidity(); 

  // Button Press Handling for Temperature Adjustment
  if (digitalRead(BUTTON_UP) == LOW) setTemp++;   
  if (digitalRead(BUTTON_DOWN) == LOW) setTemp--; 

  // Cooling System Automation
  if (temp >= setTemp) {
    digitalWrite(RELAY_PIN, HIGH);     
  } else {
    digitalWrite(RELAY_PIN, LOW);      
  }

  // Air Quality and Humidity Check
  int airQuality = analogRead(AIR_QUALITY_PIN);
  if (airQuality > airQualityThreshold || humidity > humidityThreshold) {
    lcd.setCursor(0, 0);
    lcd.print("Open windows!   ");
    lcd.setCursor(0, 1);
    lcd.print("Humidity/Air bad");
    Serial.println("ALERT: Open windows to improve air quality and reduce humidity!");
    delay(2000);
    return;                            
  }

  // Update LCD Display
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(temp);
  lcd.print("C ");
  lcd.setCursor(0, 1);
  lcd.print("Humidity: ");
  lcd.print(humidity);
  lcd.print("% ");

  // Delay at the end of the loop
  delay(1000); 
}
